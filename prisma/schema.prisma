// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model TimeSlot {
  id                 Int            @id @default(autoincrement())
  facilityId         Int
  dayOfWeek          Int // Representing days as integers (e.g., 0 for Sunday, 1 for Monday, etc.)
  startTime          DateTime
  endTime            DateTime
  price              Decimal        @db.Decimal(8, 2)
  status             TimeSlotStatus @default(available)
  temporaryBlockDate DateTime?
  isActive           Boolean?       @default(true)

  facility Facility @relation(fields: [facilityId], references: [id])

  bookingSlots BookingSlot[]

  @@index([facilityId, dayOfWeek])
}

model BookingSlot {
  id         Int @id @default(autoincrement())
  bookingId  Int
  timeSlotId Int

  booking  Booking  @relation(fields: [bookingId], references: [id])
  timeSlot TimeSlot @relation(fields: [timeSlotId], references: [id])

  @@unique([bookingId, timeSlotId])
}

model Booking {
  id        Int      @id @default(autoincrement())
  userId    Int
  status    String?
  price     Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bookingSlots BookingSlot[]
  user         User          @relation(fields: [userId], references: [id])
  facility     Facility      @relation(fields: [facilityId], references: [id])
  facilityId   Int
}

model Role {
  id          Int          @id @default(autoincrement())
  value       String       @unique
  description String
  users       User[]
  UsersRoles  UsersRoles[]
}

model UsersRoles {
  userId Int
  roleId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role   Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
}

model User {
  id             Int          @id @default(autoincrement())
  fullname       String?
  email          String       @unique
  dateOfBirth    DateTime?
  password       String?
  roles          Role[]
  UsersRoles     UsersRoles[]
  avatar         String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  activationLink String?      @unique
  isActivated    Boolean      @default(false)
  googleId       String?      @unique
  facebookId     String?      @unique

  facilities Facility[] @relation("UserFacilities")
  favorites  Favorite[]

  bookings  Booking[]
  UserOwner UserOwner?
  Rating    Rating[]
  Facility  Facility[]
}

model UserOwner {
  id               Int     @id @default(autoincrement())
  phone            String
  organizationName String?

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique
}

model Facility {
  id             Int            @id @default(autoincrement())
  name           String?
  address        String?
  sportType      sport_type[]
  coveringType   covering_type?
  facilityType   facility_type?
  description    String?
  location       String?
  minBookingTime Int?
  avgPrice       Decimal?       @db.Decimal(8, 2)
  ownerId        Int
  districtId     Int
  isWorking      Boolean        @default(false)


  owner          User           @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  district       District       @relation(fields: [districtId], references: [id]) // New relation to District
  users          User[]         @relation("UserFacilities")
  favorites      Favorite[]
  search_vector  Unsupported("TSVECTOR")?
  timeSlots      TimeSlot[]
  bookings       Booking[]
  ratings        Rating[]
  images         Image[]


  @@index([search_vector])
}

model City {
  id         Int        @id @default(autoincrement())
  name       String
  districts  District[] // Relation to Districts

  @@index([name], name: "idx_city_name")
}


model District {
  id       Int        @id @default(autoincrement())
  name     String
  cityId   Int

  city     City       @relation(fields: [cityId], references: [id])
  facilities Facility[] // Relation to Facilities

  @@index([name], name: "idx_district_name")
  @@index([cityId], name: "idx_district_cityId")
}



model Favorite {
  id         Int @id @default(autoincrement())
  userId     Int
  facilityId Int

  user     User     @relation(fields: [userId], references: [id])
  facility Facility @relation(fields: [facilityId], references: [id])

  @@unique([userId, facilityId])
}

model Image {
  id         Int      @id @default(autoincrement())
  image      String
  facilityId Int
  isMain     Boolean  @default(false)
  facility   Facility @relation(fields: [facilityId], references: [id])
}

model Rating {
  id    Int @id @default(autoincrement())
  value Int

  userId     Int
  facilityId Int

  user     User     @relation(fields: [userId], references: [id])
  facility Facility @relation(fields: [facilityId], references: [id])

  @@unique([userId, facilityId])
}

enum sport_type {
  basketball
  soccer
  tennis
  volleyball
}

enum covering_type {
  artificial_lawn
  parquet
  natural_lawn
  rubber
  sand
}

enum facility_type {
  indoor
  outdoor
}

enum TimeSlotStatus {
  available
  booked
  unavailable
}

enum BookingStatuses {
  approved
  unapproved
  paid
  pending
  cancelled
  expired
  completed
  failed
}
