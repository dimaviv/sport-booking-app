# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Booking {
  bookingSlots: [BookingSlot!]!
  facility: Facility!
  facilityId: Int!
  id: Int!
  price: Float
  status: String
  user: User!
  userId: Int!
}

type BookingSlot {
  booking: Booking!
  bookingId: Int!
  id: Int!
  timeSlot: TimeSlot!
  timeSlotId: Int!
}

type Count {
  ratings: Float!
}

input CreateBookingInput {
  facilityId: Int!
  timeSlotIds: [Int!]!
}

input CreateFacilityInput {
  address: String!
  coveringType: covering_type!
  description: String
  district: String
  facilityType: facility_type!
  location: String
  minBookingTime: Float
  name: String!
  sportType: sport_type!
}

type CreateFacilityResponse {
  facility: Facility!
  photo: Image
}

input CreateRatingInput {
  facilityId: Float!
  value: Float!
}

input CreateScheduleInput {
  daysOfWeek: [Int!]!
  endTime: String!
  facilityId: Float!
  price: Float!
  startTime: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input FacilitiesFilterInput {
  coveringType: String
  district: String
  facilityType: String
  ownerId: Float
  search: String
  sortBy: String
  sportType: String
}

type FacilitiesResponse {
  facilities: [Facility!]!
  totalCount: Float!
}

type Facility {
  _count: Count!
  address: String!
  avgRating: Float!
  bookings: [Booking!]!
  coveringType: String!
  currentUserRate: Rating
  description: String
  district: String!
  facilityType: String!
  id: Float!
  images: [Image!]
  location: String
  minBookingTime: Float
  name: String!
  owner: User!
  ownerId: Float!
  ratingCount: Float!
  ratings: [Rating!]!
  sportType: String!
  timeSlots: [TimeSlot!]!
}

type Image {
  facility: Facility
  facilityId: Float!
  id: Float!
  image: String!
  isMain: Boolean
}

input LoginDto {
  email: String!
  password: String!
}

type LoginResponse {
  accessToken: String!
  refreshToken: String!
  user: User!
}

type Mutation {
  accessToken(refresh: String): String!
  create(roleInput: RoleDto!): RoleResponse!
  createBooking(createBookingInput: CreateBookingInput!): Booking!
  createFacility(createFacilityInput: CreateFacilityInput!, photo: Upload): CreateFacilityResponse!
  createRating(createRatingInput: CreateRatingInput!): Rating!
  createSchedule(createScheduleInput: CreateScheduleInput!): [TimeSlot!]!
  login(loginInput: LoginDto!): LoginResponse!
  logout: String!
  register(registerInput: RegisterDto!): RegisterResponse!
  removeFacility(id: Int!): Facility!
  removeRating(facilityId: Int!): Rating!
  updateBooking(updateBookingInput: UpdateBookingInput!): Booking!
  updateFacility(photo: Upload, updateFacilityInput: UpdateFacilityInput): UpdateFacilityResponse!
  updateProfile(avatar: Upload, profileInput: UpdateUserDto): User!
  updateRating(updateRatingInput: UpdateRatingInput!): Rating!
  updateTimeSlots(updateTimeSlotsInput: UpdateTimeSlotsInput): [TimeSlot!]!
  uploadFacilityPhotos(facilityId: Float!, photos: Upload!): [Image!]!
}

input PaginationArgs {
  limit: Int!
  page: Int!
}

type Query {
  facility(id: Int!): Facility!
  findAll(facilitiesFilterInput: FacilitiesFilterInput, paginationArgs: PaginationArgs): FacilitiesResponse!
  getByValue(name: String!): RoleResponse!
  getProfile: User!
  hello: String!
}

type Rating {
  facility: Facility!
  facilityId: Float!
  id: Float!
  user: User!
  userId: Float!
  value: String!
}

input RegisterDto {
  confirmPassword: String!
  email: String!
  password: String!
}

type RegisterResponse {
  accessToken: String
  refreshToken: String
  user: User
}

type Role {
  description: String
  id: Float
  users: [User!]
  value: String
}

input RoleDto {
  description: String!
  value: String!
}

type RoleResponse {
  role: Role!
}

type TimeSlot {
  dayOfWeek: Int!
  endTime: DateTime!
  facility: Facility!
  facilityId: Int!
  id: Int!
  price: Float!
  startTime: DateTime!
  status: String!
  temporaryBlockDate: DateTime!
}

enum TimeSlotStatus {
  available
  booked
  unavailable
}

input UpdateBookingInput {
  facilityId: Int
  id: Int!
  timeSlotIds: [Int!]
}

input UpdateFacilityInput {
  address: String
  coveringType: covering_type
  description: String
  district: String
  facilityType: facility_type
  id: Float!
  location: String
  minBookingTime: Float
  name: String
  sportType: sport_type
}

type UpdateFacilityResponse {
  facility: Facility!
  photo: Image
}

input UpdateRatingInput {
  id: Int!
  value: Float!
}

input UpdateTimeSlotsInput {
  price: Float
  status: TimeSlotStatus
  temporaryBlockDate: DateTime
  timeSlotIds: [Int!]!
}

input UpdateUserDto {
  dateOfBirth: String
  fullname: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  activationLink: String
  avatar: String
  createdAt: DateTime
  dateOfBirth: DateTime
  email: String
  facebookId: String
  facilities: [Facility!]
  fullname: String
  googleId: String
  id: Float
  isActivated: Boolean
  password: String
  roles: [Role!]!
  updatedAt: DateTime
  userOwner: UserOwner
}

type UserOwner {
  id: Float
  organizationName: String
  phone: String
  userId: String
}

enum covering_type {
  artificial_lawn
  natural_lawn
  parquet
  rubber
  sand
}

enum facility_type {
  indoor
  outdoor
}

enum sport_type {
  basketball
  soccer
  tennis
  volleyball
}